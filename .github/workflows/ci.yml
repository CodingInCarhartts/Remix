name: Cargo Mix CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Set CARGO_HTTP_MULTIPLEXING
        run: |
          if rustc +stable --version --verbose | grep -q '^release: 1\.7[01]\.'; then
            echo CARGO_HTTP_MULTIPLEXING=false >> $GITHUB_ENV
          fi
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ""
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: cargo-mix-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/cargo-mix${{ matrix.extension }}

  release:
    name: Release
    needs: [test, clippy, format, build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cargo-mix-x86_64-unknown-linux-gnu/cargo-mix
            cargo-mix-x86_64-pc-windows-msvc/cargo-mix.exe
            cargo-mix-x86_64-apple-darwin/cargo-mix
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}